#version 450

#define ZOOM 20

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D img;

#define CHUNKSIZE 32

layout(binding = 1) buffer ChunkBuffer {
  uint[] data;
} chunk_buffer;

#define POS_IN_BOUNDS(pos) pos.x < CHUNKSIZE && pos.y < CHUNKSIZE
#define GET_NODE_AT(pos) chunk_buffer.data[pos.x * CHUNKSIZE + pos.y]


bool at_boarder(vec2 v, float border_size) {
  return v.x < border_size || (1 - v.x) < border_size || v.y < border_size || (1 - v.y) < border_size;
}

void main () {

  uvec2 pos = gl_GlobalInvocationID.xy;

  vec4 color = vec4(0.0);

  uvec2 node_pos = pos / ZOOM;
  vec2 in_node_pos = mod(vec2(pos), ZOOM) / ZOOM;

  if (POS_IN_BOUNDS(node_pos)) {
    uint node_data = GET_NODE_AT(node_pos);

    if (node_data != 0 && at_boarder(in_node_pos, 0.05)) {
      color = vec4(1.0, 0.0, 0.0, 1.0);
    }
  }

  imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}
