#version 450

vec4 rgb(uint r, uint g, uint b) {
  return vec4(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0, 1.0);
}

#define CHUNKSIZE 32
#define SELECTOR_BIT 31

#define SELECTED_VALUE_BITS 4
#define SELECTED_VALUE_MASK uint(pow(2, SELECTED_VALUE_BITS) - 1)
#define BITS_PER_VALUE 4

#define ADDED_OFFSET 0
#define ADD_OFFSET 1
#define PROPERGATE_OFFSET 2
#define SELECT_OFFSET 3

#define STONE_INDEX 0
#define GRASS_INDEX 1
#define SAND_INDEX 2

#define ADD_COLOR rgb(0, 53, 218)
#define PROPERGATE_COLOR rgb(133, 23, 152)
#define SELECT_COLOR rgb(57, 150, 221)

#define STONE_COLOR rgb(88, 90, 94)
#define GRASS_COLOR rgb(0, 128, 0)
#define SAND_COLOR rgb(226, 202, 118)

#define PIXELS_PER_NODE 30
#define BORDER_SIZES 0.02
#define RECT_SIZE 0.2

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D img;


layout(binding = 1) buffer ChunkBuffer {
  uint[] data;
} chunk_buffer;

#define POS_IN_BOUNDS(pos) pos.x < CHUNKSIZE && pos.y < CHUNKSIZE
#define GET_NODE_AT(pos) chunk_buffer.data[pos.x * CHUNKSIZE + pos.y]


vec4 node_color(uint data) {
  uint node_index = data & (SELECTED_VALUE_MASK);

  if (node_index == STONE_INDEX + 1) {
    return STONE_COLOR;
  }

  if (node_index == GRASS_INDEX + 1) {
    return GRASS_COLOR;
  }

  if (node_index == SAND_INDEX + 1) {
    return SAND_COLOR;
  }

  return vec4(0.0);
}

bool at_boarder(vec2 v, float border_size) {
  return v.x < border_size || (1 - v.x) < border_size * 2 || v.y < border_size || (1 - v.y) < border_size * 2;
}

bool in_inner_rect(vec2 v, vec2 min, vec2 max) {
  return v.x > min.x && v.x < max.x && v.y > min.y && v.y < max.y;
}

bool bit_set(uint data, uint idx) {
  return ((data >> idx) & 1) == 1;
}

bool value_bit_set(uint data, uint value_type, uint offset) {
  return bit_set(data, SELECTED_VALUE_BITS + (value_type * BITS_PER_VALUE) + offset);
}

vec4 debug_color(uint data, vec2 v, vec4 color) {
  if (bit_set(data, SELECTOR_BIT) && at_boarder(v, BORDER_SIZES)) {
    return rgb(244, 238, 238);
  }

  if (value_bit_set(data, STONE_INDEX, ADD_OFFSET) && in_inner_rect(v, vec2(0.0, 0.0), vec2(RECT_SIZE, RECT_SIZE))) {
    return ADD_COLOR;
  }

  if (value_bit_set(data, GRASS_INDEX, ADD_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE, 0.0), vec2(RECT_SIZE * 2, RECT_SIZE))) {
    return ADD_COLOR;
  }

  if (value_bit_set(data, SAND_INDEX, ADD_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE * 2, 0.0), vec2(RECT_SIZE * 3, RECT_SIZE))) {
    return ADD_COLOR;
  }



  if (value_bit_set(data, STONE_INDEX, PROPERGATE_OFFSET) && in_inner_rect(v, vec2(0.0, RECT_SIZE), vec2(RECT_SIZE, RECT_SIZE * 2))) {
    return PROPERGATE_COLOR;
  }

  if (value_bit_set(data, GRASS_INDEX, PROPERGATE_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE, RECT_SIZE), vec2(RECT_SIZE * 2, RECT_SIZE * 2))) {
    return PROPERGATE_COLOR;
  }

  if (value_bit_set(data, SAND_INDEX, PROPERGATE_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE * 2, RECT_SIZE), vec2(RECT_SIZE * 3, RECT_SIZE * 2))) {
    return PROPERGATE_COLOR;
  }


  if (value_bit_set(data, STONE_INDEX, SELECT_OFFSET) && in_inner_rect(v, vec2(0.0, RECT_SIZE * 2), vec2(RECT_SIZE, RECT_SIZE * 3))) {
    return SELECT_COLOR;
  }

  if (value_bit_set(data, GRASS_INDEX, SELECT_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE, RECT_SIZE * 2), vec2(RECT_SIZE * 2, RECT_SIZE * 3))) {
    return SELECT_COLOR;
  }

  if (value_bit_set(data, SAND_INDEX, SELECT_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE * 2, RECT_SIZE * 2), vec2(RECT_SIZE * 3, RECT_SIZE * 3))) {
    return SELECT_COLOR;
  }


  if (value_bit_set(data, STONE_INDEX, ADDED_OFFSET) && in_inner_rect(v, vec2(0.0, RECT_SIZE * 4), vec2(RECT_SIZE, RECT_SIZE * 5))) {
    return STONE_COLOR;
  }

  if (value_bit_set(data, GRASS_INDEX, ADDED_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE, RECT_SIZE * 4), vec2(RECT_SIZE * 2, RECT_SIZE * 5))) {
    return GRASS_COLOR;
  }

  if (value_bit_set(data, SAND_INDEX, ADDED_OFFSET) && in_inner_rect(v, vec2(RECT_SIZE * 2, RECT_SIZE * 4), vec2(RECT_SIZE * 3, RECT_SIZE * 5))) {
    return SAND_COLOR;
  }

  /*
  if (in_inner_rect(v, vec2(0.0, RECT_SIZE * 4), vec2(RECT_SIZE * 3, RECT_SIZE * 5))) {
    return rgb(27, 27, 27);
  }
  */

  return color;
}

void main () {

  uvec2 pos = gl_GlobalInvocationID.xy;

  vec4 color = vec4(0.0);

  uvec2 node_pos = pos / PIXELS_PER_NODE;
  vec2 in_node_pos = mod(vec2(pos), PIXELS_PER_NODE) / PIXELS_PER_NODE;

  if (POS_IN_BOUNDS(node_pos)) {
    uint data = GET_NODE_AT(node_pos);

    color = node_color(data);
    color = debug_color(data, in_node_pos, color);
  }

  imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}
